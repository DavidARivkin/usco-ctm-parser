/**
 * Loader for CTM encoded models generated by OpenCTM tools:
 *	http://openctm.sourceforge.net/
 *
 * Uses js-openctm library by Juan Mellado
 *	http://code.google.com/p/js-openctm/
 *
 * @author alteredq / http://alteredqualia.com/
 * heavilly modified by kaosat-dev
 */

import detectEnv from 'composite-detect'
import assign from 'fast.js/object/assign'
import Rx from 'rx'

import CTM from './ctm'

import { ensureArrayBuffer } from './utils'
import { createModelBuffers } from './parseHelpers'
// import {parseSteps} from './parseHelpers'

export const outputs = ['geometry'] // to be able to auto determine data type(s) fetched by parser
export const inputDataType = 'arrayBuffer' // to be able to set required input data type

// Load CTM compressed models
export default function parse (data, parameters = {}) {
  const defaults = {
    useWorker: (detectEnv.isBrowser === true),
    offsets: [0]
  }
  parameters = assign({}, defaults, parameters)

  const {useWorker, offsets} = parameters
  const obs = new Rx.ReplaySubject(1)

  let length = 0
  data = ensureArrayBuffer(data)

  let binaryData = new Uint8Array(data)
  let result = null

  // var binaryData = new Uint8Array(data)
  // var binaryData = new Uint8Array( new ArrayBuffer(data) )
  // var binaryData = new Buffer( new Uint8Array(data) )

  // TODO: this is only temporary for NODE.js side
  // var data = toArrayBuffer(data)

  if (useWorker) {
    // let Worker = require("./worker.js");//Webpack worker!
    // var worker = new Worker

    let worker = new Worker('./worker.js') // browserify

    worker.onmessage = function (event) {
      let files = event.data

      files.forEach(ctmFile => {
        let geometry = createModelBuffers(ctmFile)
        // obs.onNext({progress: 1, total:Math.NaN})
        obs.onNext(geometry)
      })

      obs.onNext({progress: 1, total: Math.NaN})
      obs.onCompleted()
    }
    worker.onerror = function (event) {
      obs.onError(`filename:${event.filename} lineno: ${event.lineno} error: ${event.message}`)
    }

    worker.postMessage({ 'data': binaryData, 'offsets': offsets })
    obs.catch(e => worker.terminate())
  } else {
    for ( var i = 0; i < offsets.length; i++) {
      try {
        let stream = new CTM.Stream(binaryData)

        stream.offset = offsets[ i ]
        let ctmFile = new CTM.File(stream)

        let geometry = createModelBuffers(ctmFile)
        // obs.onNext({progress: 1, total:Math.NaN})
        obs.onNext(geometry)
      } catch (error) {
        obs.onError(error)
      }
    }

  // obs.onNext({progress: 1, total:Math.NaN})
  // obs.onCompleted()
  }
  return obs
}
